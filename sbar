#!/bin/env sh

# INIT
printf "$$" > ~/.cache/pidofbar
sec=0

# MODULES
update_cpu () { 
	cpu="$(grep -o "^[^ ]*" /proc/loadavg )" 
}

update_memory () { 
	memory="$(free -h | sed -n "2s/\([^ ]* *\)\{2\}\([^ ]*\).*/\2/p")"
}

update_time () { 
	time="$(date "+[%a %d %b] [%I:%M %P]")" 
}

update_bat () { 
	# you might need to change the path depending on your device
	read -r bat_status </sys/class/power_supply/BAT0/status
	read -r bat_capacity </sys/class/power_supply/BAT0/capacity
	bat="$bat_status $bat_capacity%"
}

update_vol () {
    # Check if pactl (PipeWire/PulseAudio control) is available
    if command -v pactl >/dev/null 2>&1; then
        # Get volume level and mute status using PipeWire or PulseAudio
        vol=$(pactl get-sink-volume @DEFAULT_SINK@ | awk '{print $5}')
        mute=$(pactl get-sink-mute @DEFAULT_SINK@ | awk '{print $2}')
        
        # Display volume with mute/unmute icon
        printf "%s" "$( [ "$mute" = "yes" ] && printf 'ðŸ”‡' || printf 'ðŸ”Š' )$vol"
    elif command -v pamixer >/dev/null 2>&1; then
        # Fallback for PulseAudio with pamixer
        vol=$(pamixer --get-volume)
        mute=$(pamixer --get-mute)
        
        # Display volume with mute/unmute icon
        printf "%s" "$( [ "$mute" = "true" ] && printf 'ðŸ”‡' || printf 'ðŸ”Š' )$vol%"
    else
        # Handle case where neither PipeWire nor PulseAudio control tools are available
        printf "Volume control unavailable"
    fi
}

#update_vol () { 
#	# Check if PipeWire is being used
#	if command -v pactl >/dev/null 2>&1; then
#		# Get volume level and mute status
#		vol=$(pactl get-sink-volume @DEFAULT_SINK@ | awk '{print $5}')
#		mute=$(pactl get-sink-mute @DEFAULT_SINK@ | awk '{print $2}')
#		printf "%s" "$( [ "$mute" = "yes" ] && printf 'ðŸ”‡' || printf 'ðŸ”Š' )$vol%"
#	else
#		# Default fallback (e.g., for PulseAudio)
#		printf "%s" "$( [ "$(pamixer --get-mute)" = "false" ] && printf 'ðŸ”Š' || printf 'ðŸ”‡' )$(pamixer --get-volume)%"
#	fi
#}

update_backlight () { 
	# you might need to change the path depending on your device
	read -r actual_brightness </sys/class/backlight/intel_backlight/actual_brightness
	read -r max_brightness </sys/class/backlight/intel_backlight/max_brightness
	backlight="â˜€$((actual_brightness*100/max_brightness))%"
}

# modules that don't update on their own need to be run at the start for getting their initial value
update_vol
update_backlight

display () { 
	#printf "%s\n" " $event [$memory $cpu] [$bat] [$backlight] [$vol] $time "
	xsetroot -name " [$memory $cpu] [$bat] [$backlight] [$vol] $time "
}

# SIGNALLING
# trap	"<function>;display"		"RTMIN+n"
trap	"update_vol;display"		"RTMIN"
trap	"update_backlight;display" 	"RTMIN+1"
trap	"update_bat;display" 		"RTMIN+2"
# to update it from external commands
## kill -m "$(cat ~/.cache/pidofbar)"
# where m = 34 + n

while true
do
	sleep 1 & wait && { 
		# to update item ever n seconds with a offset of m
		## [ $((sec % n)) -eq m ] && udpate_item
		[ $((sec % 5 )) -eq 0 ] && update_time 	# update time every 5 seconds
		[ $((sec % 15)) -eq 0 ] && update_cpu 	# update cpu every 15 seconds
		[ $((sec % 15)) -eq 0 ] && update_memory
		[ $((sec % 60)) -eq 0 ] && update_bat

		# how often the display updates ( 5 seconds )
		[ $((sec % 5 )) -eq 0 ] && display
		sec=$((sec + 1))
	}
done
